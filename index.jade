!!! 5
html(lang='en')
  head
    meta(charset='utf-8')
    title reveal.js - The HTML Presentation Framework
    meta(name='description', content='A framework for easily creating beautiful presentations using HTML')
    meta(name='author', content='Hakim El Hattab')
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
    link(rel='stylesheet', href='css/reveal.min.css')
    link#theme(rel='stylesheet', href='css/theme/sky.css')
    // For syntax highlighting
    link(rel='stylesheet', href='lib/css/zenburn.css')
    // syntaxHighlighter
    script(type='text/javascript', src='js/shCore.js')
    script(type='text/javascript', src='js/shBrushGo.js')
    script(type='text/javascript', src='js/shBrushPython.js')
    script(type='text/javascript', src='js/shBrushPhp.js')
    script(type='text/javascript', src='js/shBrushBash.js')
    script(type='text/javascript', src='js/shBrushJScript.js')
    script(type='text/javascript', src='js/shBrushXml.js')
    link(rel='stylesheet', href='css/syntaxHighlighter/shCore.css')
    link(rel='stylesheet', href='css/syntaxHighlighter/shThemeDefault.css')
    style(type='text/css').
      body .syntaxhighlighter {
        font-size: 18px !important;
      }
    // If the query includes 'print-pdf', use the PDF print sheet
    script.
      document.write( '<link rel="stylesheet" href="css/print/' + ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + '.css" type="text/css" media="print">' );
    //if lt IE 9
      script(src='lib/js/html5shiv.js')
  body
    .reveal
      // Any section element inside of this container is displayed as a slide
      .slides
        section
          section
            h1 Angular JS
            p
              a(href='http://www.angularjs.org/') angularjs.org
          section
            h1 Kilder
            ul
              li <a href="http://egghead.io">egghead.io</a> - Videoer til de enkelte koncepter
              li <b>Angular JS</b> - Brad Green, Shyam Seshadri
              li Youtube - <b>"AngularJS Fundamentals In 60-ish Minutes"</b>
              li <a href="http://docs.angularjs.org/api">docs.angularjs.org/api</a>
              li <a href="http://docs.angularjs.org/guide">docs.angularjs.org/guide</a>
        section
          section
            h1 Status quo
            p Hvad er der galt med jquery-javascript?
            p Hvad er der galt med vanilla js+DOM
            p(style="font-size: 0.7em;") *alting er js + DOM...også angular
            aside.notes
              p TODO: Imperative handlinger i ui vs declarative
          section
            h2 State i DOM'en
            pre(class="brush: js").
              // ...

              runSearch: function ()
              {
                  CompanySearch.jqueryTable.datagrid('load',{
                      query: $('#company-search-filter-query').val(),
                      search_type: $('#company-search-filter-search-type').val(),
                      canvas: $('#company-search-filter-canvas').is(':checked'),
                      debitor: $('#company-search-filter-debitor').is(':checked'),
                      test: $('#company-search-filter-test').is(':checked'),
                      group: $('#company-search-filter-group').is(':checked'),
                      attached: $('#company-search-filter-attached').is(':checked'),
                      company_group: $('#company-search-filter-company-group').val(),
                      last_contacted: $('#company-search-sort-last-contacted').is(':checked')
                  });
              },

              // ...
          section
            h2 Business logic og UI-kode er blandet sammen
            p UI's behavior er styret af imperative metodekald/mutationer.
            pre(class="brush: js").
              // ...

              function handleSomeCallback(status, data) {
                if (status !== "OK") {
                  $("#error-list").append("<li>" + data.message + "</li>");
                  setTimeout(resetErrorList, 2150);
                  return;
                }

                // jQuery hide, ved at den skal rydde køen
                // af igangværende animationer
                $("#error-list").hide()

                // Use the data to update the DOM
                $("#discount-code").text("Discount applied!").show()

                var $orderList = $("#order-list");
                for (var item in data.items) {
                  var $newOrderItem = $("<div class="\order-item\" />");
                  $newOrderItem.text(item.description);
                  $orderList.append($orderList);
                }
              }

              // ...
          section
            h1 Deklarativ UI
              aside.notes.
                Business logic er misvisende, da vores business bare er at opdatere ui.
            p Vi kender det fra HTML og CSS
            pre(class="brush: xml").
              <div class="header-footer-title">
                <button style="cursor: pointer;">Tryk!</button>
              </div>
            p Vi kender data-binding fra data-controls
            pre(class="brush: xml").
              <div class="data-grid"
                onchange="doSomething();"
                onselect="doSomethingElse()">
              </div>
          section
            h2 Deklarativ UI med data-bindings
            p AngularJS tilføjer direktiver
            pre(class="brush: xml").
              <div ng-show="specialMessage">
                ...
              </div>
              <ul>
                <li ng-repeat="order in orders">
                  <div ng-bind="order.description"></div>
                  <input readonly="readonly" ng-bind="order.price"></input>
                </li>
              </ul>
            p Business logic får lov til at være ren business logic
            p Ingen selectors
            pre(class="brush: js").
              function OrderCtrl($scope) {
                $scope.orders = [
                  {description: "...", price: 700}
                ]

                function addOrder (description, price) {
                  $scope.orders.push({
                    description: description,
                    price: price
                  })
                }

                $scope.errors = [
                  "fejl1", "fejl2"
                ]

                $scope.specialMessage = false
              }
        section
          section
            h1 $scope
            p Kommunikationen mellem controller og view foregår (primært) via
            | injected service
          section
            h2 Dependency injection
            p.
              $scope-servicen, som udgør forbindelsen til viewet er injectet og
              kan derfor mockes
            pre(class="brush: js").
              // ...

              // $scope er resolved by parameter name
              function HelloCtrl ($scope) {

              }

              // ...
            p Tip: brug <a href="https://github.com/btford/ngmin">ngmin</a>
        section
          section
            h1 Byggesten
            p Moduler
            p Controller
            p Values og constants
            p Providers, factories, services
          section
            h2 Moduler
            pre(class="brush: js").
              // ...
              (function () {
                var myApp = angular.module("util", [])
                ...
              })();
              // ...
            pre(class="brush: js").
              // ...
              (function () {
                var myApp = angular.module("orderPage", ["util"])
                ...
              })();
              // ...
            p Ingen async/lazy loading. Brug evt require js
            p <b>Educas</b> Vi minifier + konkatenerer alting
          section
            h2 Controller
            p Logik for et afgrænset område af viewet
            pre(class="brush: xml").
               <!-- ... -->
               <div ng-controller="HelloCtrl">
                 <ul>
                   <li ng-repeat="order in orders"> ... </li>
                 </ul>
               </div>
               <!-- ... -->
            pre(class="brush: js").
              // ...
              myApp.controller("HelloCtrl", function ($scope) {
                $scope.orders = [
                  // ...
                ]
              })
          section
            h2 Values og constants
            pre(class="brush: js").
              // ...
              myApp.value("LixNumber", 42)

              myApp.constant("Pi", 4)
              myApp.config(function ($routeProvider, Pi) {
                // ...
              })

              myApp.controller("HelloCtrl", function ($scope, LixNumber, Pi) {
                $scope.orders = [
                  // ...
                ]

                $scope.lixNumber = LixNumber
              })
              // ...
          section
            h2 Providers
            p Tillader konfiguration
            pre(class="brush: js").
              // ...
              myApp.provider("FiskProvider", function() {
                return {
                  someState: false,
                  $get: function () {
                    return "Fisk"
                  }
                }
              })

              myApp.config(function (FiskProvider) {
                FiskProvider.state = true
              })

              myApp.controller("HelloCtrl", function(Fisk) {
                // $get() -> Fisk
              })
              // ...
          section
            h2 Factories
            pre(class="brush: js").
              // ...

              // Shortcut for provider({ $get: <function> })
              myApp.factory("Fisk", function(Pi) {
                return Pi * 37
              });

              myApp.controller("HelloCtrl", function(Fisk) {
                // Fisk === Pi * 37
              })
              // ...
            section
              h2 Service
              p Rarely used
              pre(class="brush: js").
                // ...
                // js "constructor"
                Person = function () {
                  this.name = "Finn"
                }
                myApp.service("Person", Person)
                // ...
        section
          h2 runtime
          aside.notes
            $apply, $eval, $digest, $watch
    script(src='lib/js/head.min.js')
    script(src='js/reveal.min.js')
    script.
      // Full list of configuration options available here:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
      controls: true,
      progress: true,
      history: true,
      center: false,
      theme: Reveal.getQueryHash().theme, // available themes are in /css/theme
      transition: Reveal.getQueryHash().transition || 'default', // default/cube/page/concave/zoom/linear/fade/none
      // Optional libraries used to extend on reveal.js
      dependencies: [
      { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
      { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
      { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
      { src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
      { src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
      // { src: 'plugin/search/search.js', async: true, condition: function() { return !!document.body.classList; } }
      // { src: 'plugin/remotes/remotes.js', async: true, condition: function() { return !!document.body.classList; } }
      ]
      });
      SyntaxHighlighter.all();
